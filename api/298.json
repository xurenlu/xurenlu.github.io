{"title":"道可道，非常道---PHP模板技术","zzzContent":"道可道，非常道---PHP模板技术\n\n道可道，非常道。\n\n\n当我第一次见到php模板的时候，简直被迷上了。原来php世界里还有这么好的东西。我疯狂地学习。\n好在当时的php模板还不是很庞大，很快我了解了它的原理，并也能自己写一些了。\n后来，smarty横空出世，更是拥有了许多为它着迷的fans.许多人开始写模板引擎，将smarty或其他模板加以改造，使之符合自己的需要。\n纵观当今模板世界，php模板引擎主要分为两种：\n一种是替换特定字串型的。美工做出来的页面，中间会嵌入一些什么{block.title}这样的字符串，然后程序读入这个模板文件，将中间的{block.title}的字样替换成实际从数据库中读取的内容。\n还有一种符杂一些，是一种编译型的。以smarty为代表，模板文件中实际上包含了一些简化的php代码，比如有的写的是<{=$site_name}>,<{if $counts>0 }>这样的语句，实际是一种自行定义的语言格式。web开发久的人一眼能看出它们指的是什么。这一类往往会在第一次访问时被预编译，转换成一个php文件何存起来。比如 <{=$site_name}>就变成了<?php echo $site_name;?>,<{if $count>0 }> 就变成了<?php if($count>0) {?>。从第二次起，就直接包含已经编译出来的php文件。当然，各种模板的处理的具体细节不一样。\n\n但是，我们为什么要用模板？\n这个问题我也不能很好的回答。但是有很多人这么说：要让美工和程序员的工作分开。要让代码层和表现层分开。\n那么我们看这两种方式实现了吗?\n让您的美工人员打开一个smarty文件，让他按他的思路去改一下视图设计。他会告诉您，天哪，你怎么把我的设计变成这样一幅样子了？这些foreach,if都是什么意思？噢，天哪，我的表格怎么撑得这么大了？....\n原来编译型的模板技术让美工更没法子做美工了。\n那么替换字符串型的呢?看起来是轻松多了。不过您可以测测您的程序速度，看看他是否已经慢了一倍以上。很容易，您用了太多的有preg_match,或是str_ireplace之类的语句来替换。程序重复一次又一次在您那几万个甚至更多字节的模板文件中查找某个字串，来替换内容。\n不仅如此，你还发现您哪天想在视层面插一点东西时，处处受制于模板。您肯定很想直接在模板中写一段<?php echo $_SERVER[\"HTTP_HOST\"];?>之类的语句，但是，很抱歉，您不能这么写。如果只是想echo 一个什么东西，您可以在模板中加一个{{var}}的串，然后在php程序中写\n$var=\"这一个串\";\n$template->assign(\"var\",$var);\n但是如果您不是想输出呢，想做其他操作？抱歉，您还是得改php代码。这些模板都支持规矩矩的表格状的输出，但是，如果我想输出20条记录，我要弄一个第一行2列记录的，第二行3列的，第三行又是2行的之类的，或者是其他类似找码，您打算怎么办?\n难道再让您的模板引擎也升级成为编译性的，好让您往您的模板中加入php语句?\n\n\n您错了。其实，我们看一看，我们的模板引擎充当了什么样的角色呢?我们把一段特定的按一定规则编写的html代码进行一定的数据处理后输出成了另外一段，输出过程中某些字符发生了改变。那我们的伟大的php干了什么呢?它帮我们把我们按规则写好的php代码也按一定规则输出成了一段html。两者本质是一样的。只是，php本身比我们那些蹩脚的模板引擎更快，更漂亮。\n再说细一点，现在用的最多的Smarty.看一看它的结构:\n<coolcode lang=\"php\">\n<{if $article.rates}>\n<span class=\"title\"><{php}>echo art_constant(\"MD_RATE\");<{/php}>:</span>\n<span class=\"item\"><{$article.rating}>/<{$article.rates}></span>\n<{/if}>\n</coolcode>\n你觉得它是一个美工能看清的html文件么?\n看看编译后的结果,它看起来应该是这样的:\n<coolcode lang=\"php\">\n<?php\nif($articles.rates){\n?>\n<span class=\"title\"><?php echo art_constant(\"MD_RATE\");?>:</span>\n<span class=\"item\"><?php echo $article.rating;?>/<?php echo article.rates;?></span>\n<?php\n}?>\n</coolcode>\n哈。我们伟大的smarty把这html也变成了php了。然后在以后的工作中，这些php代码会直接被运行。\n有必要吗?本来是apache承载php,php直接编译php 源代码，现在变成了apache承载php,php编译smarty引擎，smarty引擎又去编译html文件。反而多了一层，smarty自个儿把本来php要做的工作拿了做了。\n而且糟糕的是，smarty的模板打开来以后，比php文件更让人难以看清。\n所以我说，放弃您的模板系统吧。但记住我们开发模板系统的初衷。\n\n\n您会说：那要是放弃模板系统了，我怎么分开程序逻辑和视图层面？\n这个也太好办了。您可以这样写：\n第一个文件这样写:\n<coolcode lang=\"php\">\n<?php\n/**\nfile :logic.php\n@author renlu xu<helloasp@hotmail.com>\n@link http://www.162cm.com\n*/\n$rs=mysql_query(\"select id,title,body from articles order by id desc limit 30\");\nwhile($row=$mysql_fetch_assoc($rs))\n{\n\t$rows[]=$row;\n}\n?>\n</coolcode>\n第二个文件作为您的视层面的文件。您可以让您的平面设计师在mac上设计漂亮绝顶的图片，然后切成html文件，交给您的页面整合工程师。这个工程不需要懂太多php，他基本上只需要会用print就行了。他把这个html文件改名为view.php,然后在里面加上相应代码:\n<coolcode lang=\"php\">\n<?php\n/**\nfile:view.php\n@author renlu xu<helloasp@hotmail.com>\n@link http://www.162cm.com\n*/\nforeach($rows as $row)\n{\n\techo \"<tr>\";\n\techo \"<td>\";\n\techo $row[\"id\"];\n\techo \"</td>\";\n\techo \"<td>\";\n\techo $row[\"title\"];\n\techo \"</td>\";\n\techo \"</tr>\";\n}\n?>\n</coolcode>\nok.这就视层面文件。这个文件用织梦者(dreamweaver）打开后，应该跟美工做出来的图是一样的,就仅仅多了用那个黄色的问号代表的php代码。写得好时，dreamweaver还能列出您的php代码中输出了什么内容，效果更佳。\n这两个文件，就是一个是逻辑层，一个是视层面。\n然后用index.php将他们包含起来。\n<coolcode lang=\"php\">\n<?php\n/**\nfile:index.php\n@author renlu xu<helloasp@hotmail.com>\n@link http://www.162cm.com\n*/\ninclude \"databaseConnect.php\";//连接数据库的代码，我就不写了\ninclude \"logic.php\";\ninclude \"view.php\";\ninclude \"cache.php\";\n?>\n</coolcode>\n这样逻辑和视，就分开了。那有人会说，如果我用模板，可以将要输出的内容写入到静态文件中，现在没了模板我该怎么办？\n这个不是问题。我们用的是php,超酷的php.\n看看，我们加了cache.php.这就是用来实现您说的缓存效果的。\n我们的cache文件:\n<coolcode lang=\"php\">\n<?php\n/**\nfile:cache.php\n@author renlu xu<helloasp@hotmail.com>\n@link http://www.162cm.com\n*/\n$content=ob_get_content();\n$fp=fopen(\"index.html\",\"w\");\nfwrite($fp,$content);\nfclose($fp);\n?>\n</coolcode>\n当然，index.php也改成:\n<coolcode lang=\"php\">\n<?php\n/**\nfile:index.php\n@author renlu xu<helloasp@hotmail.com>\n@link http://www.162cm.com\n*/\nif(file_exists(\"index.html\"))\n{\n\tinclude \"index.html\";\n\texit();\n}\ninclude \"databaseConnect.php\";//连接数据库的代码，我就不写了\ninclude \"logic.php\";\ninclude \"view.php\";\nincldue \"cache.php\";\n\n?>\n</coolcode>\n这样您看这缓存效果是不是就出来了？\n\n有人说：我用模板还有一个好处啊,就是模板写错了还不会影响到程序的运行。是的。咳，怎么说呢？您在模板中将<{=$site_name}>写成了<{=$sie_name}>是没啥，您的php程序还是很\"健壮\"地运行着。不过您没觉得，当您期望的那一个将由<{=$site_name}>来打出来的网站名称没有出现的时候，您排起错来会很难找吗?对于一个程序师来说，您不觉得，光只视层面的那些echo语句，只应该是您工作中极微不足道的一部分吗？在这个主要是echo语句构成的视层面文件view.php，您还出现编译期错误，是不是该拉出去打屁屁？\n\n另外，在php程序正式上线运行时，您也可以将它的报错功能关闭啊。\n\n\n\n\n\n常道，亦非常之道。\n无为，无所不为。","postDate":"2006-10-26 12:32:07","postId":298,"type":"post","status":"publish","imported":true,"file":"298.md"}