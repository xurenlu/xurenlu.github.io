{"title":"Drill:插件的基本配置","zzzContent":"当你在一个有多个drill节点的集群中添加或是更新配置的时候，drill会把这个配置变更信息广播到其他的节点，以保持配置的同步。添加，修改配置的时候，并不需要重启任何drillbit节点。\n\n<h1>使用Drill的WEB控制台</h1>\n\n你可以通过Drill web控制台来修改，添加插件配置。要启动Web console,你需要将Drill shell跑起来。\n\n要创建一个新配置，您需要：\n\n<ol>\n<li>启动Drill shell[此处应有传送门]</li>\n<li>启动Drill WEB 控制台。[此处应有传送门]</li>\n<li>进到插件tab,输入一个新插件的名字，每个名字都是<strong>一个新的存储插件</strong>。每个插件的配置都需要有一个全局唯一的名字，名字是区分大小写的。</li>\n</ol>\n\n<img src=\"https://drill.apache.org/docs/img/storage_plugin_config.png\" alt=\"\" />\n\n<ol>\n<li>点击\"create\"</li>\n<li>在配置界面，尽可能地从已经有的配置中拷贝再修改JSON配置，这样可以降低json语法错误的风险，在做一些定制修改时，请参照下一章节的存储插件属性表。</li>\n<li>点击\"Create\"。（译注：原文是\"create\",但我认为是笔误，应当是“Update\")。</li>\n</ol>\n\n<h2>存储插件的属性配置</h2>\n\n下图解释了一个典型的dfs的存储插件的各个key的含义。\n<img src=\"https://drill.apache.org/docs/img/connect-plugin.png\" alt=\"\" />\n\n<h2>属性和概念清单</h2>\n\n| 属性 | 示例  | 是否必须 | 说明 |\n|---|---|---|---|---|　\n| \"type\" | \"file\" \"hbase\" \"hive\" \"mongo\" | yes | 必须是一种合法的存储插件的名字 |\n| \"enabled\" | true false | yes | 插件的状态 |\n| “connection\" | \"classpath:///\" \"file:///\" \"mongodb://localhost:27017/\" \"hdfs://\" | 依赖于各种具体的实现 | 分布式文件系统的类型，比如HDFS,Amazon S3,或是你本地的文件系统，以及路径名 |\n| ”workspace\" | null \"logs\" | no | 一个或多个唯一的命名空间的名字。如果一个名字被使用了多次，只有最后一次是有效的 |\n| \"workspaces\"...\"location\" | \"location\":\"/Users/john/mydata/\" \"location\":\"/tmp/\" | no | 文件系统上的一个完整路径 |\n| \"workspaces\"...\"writable\" | true false | no | 如果定义了多次，只有最后一次有效 |\n| \"workspaces\"...\"defaultInputFormat\" | null \"parquet\" \"csv\" json\" | no \" 读文件的格式，不考虑扩展名。默认是“Parquet\" |\n| \"formats\" | \"csv\" \"psv\" \"tsv\" \"parquet\" \"json\" \"avro\" \"maprdb\" \"sequencefile\" | yes | 读取时合法的文件格式。Drill会检测一些文件的格式，其他的需要配置。maprdb的支持是在mapr-drill安装包里提供的 |\n| ”formats\"...\"type\" | \"text\",\"parquet\",\"json\",\"maprdb\",\"avro\",\"sequencefile\" | yes | 文件格式的类型。你可以把两种格式的,csv ,psv 都定义成“text\"类型，但是是不同的分隔符。|\n| formats... extensions | [\"csv\"] | format-dependent | drill能够读取的文件名扩展。|\n| formats... delimiter | \"\\t\" \",\" | format-dependent | 一个或多个字符的序列，用以在文本文件（例如csv)中做记录的分隔。对于不可见的字符，可以用4位的十六进制（\\xXXXX）来指代。|\n| formats...quote | \"\"\" | no | 文本文件中，开始或结束一个值用的一个字符 |\n| formats...escape | \"`\" | no | a single character that escapes a quotation mark inside a value |\n| formats ... comment | \"#\" | no | 在文本文件中开启一个注释行 |\n| formats skipFirstLine | true | no | 在读取文本文件时，包含还是忽略文件头。设置成true,可以避免把文件头当成数据读入 |\n| formats extractHeader | true | no | 设置成true,可以把文件头读进来做为列名。在extractHeader=false时，请确保skipFirstLine没有设置成true。 |\n\n<h2>使用格式相关属性</h2>\n\n你要在存储插件的配置的formats区域设置格式相关的属性，比如skipFirstLine。当设置了text类型的属性时，你需要把sys.options中的exec.storage.enable_new_text_reader 设置成 <em>true</em> ;更多信息，请参照“Text files:CSV,TSV,PSV\"章节。\n\n<h2>在表参数中使用格式相关属性</h2>\n\n从Drill 1.4起，你可以在每一个query中设置格式相关的属性了。To pass parameters to the format plugin ,use the table function syntax:\n\n<pre><code>    select a,b from table({table function name }(parameters));\n</code></pre>\n\n例如:\n\n<pre><code>    select a, b from table(dfs.`path/to/data.csv`(type =&gt; 'text',\nfieldDelimiter =&gt; ',', extractHeader =&gt; true))\n</code></pre>\n\n<h2>大小敏感</h2>\n\n在前面提到过，工作空间和存储插件的名字，都是大小写敏感的。\n【后面废话太多了 我懒得翻译了。。。】\n\n<h1>存储插件的REST API</h1>\n\n如果你需要添加一份存储插件的配置，同时又不想使用WEB 浏览器，你可以使用Drill REST API来完成。使用POST方式来请求，并传递 两个属性进来:\n\n<ul>\n<li><strong>name</strong> 存储插件的名字</li>\n<li><strong>config</strong> 在Web界面里要设置的那个配置</li>\n</ul>\n\n比如，下面这个命令就创建了一个叫myplugin的插件，这个插件读取根文件系统上一个未知类型的文件。\n\n<pre><code>curl -X POST -H \"Content-Type: application/json\" -d '{\"name\":\"myplugin\", \"config\": {\"type\": \"file\", \"enabled\": false, \"connection\": \"file:///\", \"workspaces\": { \"root\": { \"location\": \"/\", \"writable\": false, \"defaultInputFormat\": null}}, \"formats\": null}}' http://localhost:8047/storage/myplugin.json\n</code></pre>\n\n这里我们假设https未被启用。\n\n<h1>存储插件的启动引导</h1>\n\n在分布式的环境下，要通过程序自动化的方式添加存储插件，最推荐的方式是走REST API。另外还有一种方式 ，就是初始化引导方式 ，具体来说，就是在启动drill的时候，创建一个 bootstrap-storage-plugins.json 文件，放在classpath下。当Drill启动的时候，这个文件就会被加载。\n\n当前用引导方式来添加存储插件的配置时，只有集群中的第一个Drillbit在第一次启动的时候才会生效。这个配置存储在ZooKeeper里，因此就再也不会去读那个 bootstrap-storage-plugins.json 文件了。\n\n当集群起来以后，你就只能通过WEB控制台，或是REST API来添加存储插件的配置了。当然你也可以通过直接把那个插件的json文件上传到zookeeper的安装目录下的/drill路径下来修改Zookeeper里的节点，或者，如果不需要再维护相应的属性，直接删除/drill目录就好了。\n\n如果你通过bootstrap-storage-plugins.json文件加载了一个Hbase 的配置，但是HBase并没有安装，在执行查询的时候可能会觉察到一个延时。你可以在HBase的Config 区块内设置HBase 的客户端超时和重试相关的设定。","postDate":"2017-04-04 16:01:45","postId":1401,"type":"post","status":"publish","imported":true,"file":"1401.md"}