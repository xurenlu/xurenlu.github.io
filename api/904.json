{"title":"python多线程程序的中断(信号)处理","zzzContent":"python程序很容易进行多线程处理，也很好进行signal的处理。但是，在多线程程序中进行信号处理，却不太好搞。我琢磨出了一个可行的办法。\n看第一个程序:singlethread.py\n<pre>\n#!/usr/bin/python\n#coding:utf-8\n\nimport signal,os,sys,threading,time\nimport wk\ndef sig_exit():\n    print \"[end time]:\"+str(time.time())\n    print \"exited.\"\n    sys.exit()\n\ndef handler(signum, frame):\n    print \"got an signal\",signum,frame\n    if signum == 3:\n        sig_exit()\n    if signum == 2:\n        sig_exit()\n    if signum == 9:\n        sig_exit()\n        return None\nsignal.signal(signal.SIGINT,handler)\nsignal.signal(signal.SIGTERM,handler)\nsignal.signal(3,handler)\n\n\n\n\nTIME=3\n\ntime.sleep(TIME)\nprint 'normally exit'\n\n</pre>\n运行这个程序,并马上按上Ctrl+C,发现程序这样输出:\n＜pre>\n^Cgot an signal 2 <frame object at 0x95e4304>\n[end time]:1245852618.36\nexited.\n</pre>\n而不做干扰，让它正常退出时，是这样的:\n<coolcode>\nnormally exit\n</coolcode>\n\n现在我们改进到多线程版本。先写一个线程类:wk.py\n<coolcode>\nimport threading,time\nclass wk(threading.Thread):\n    def run(self):\n        for k in xrange(0,4):\n            print 'sleep 1 second,',self,\":\",k\n            time.sleep(1)\n</coolcode>\n这个线程类啥也不干，就不断输出一个标识 ，然后再歇一秒。再输出，再歇一秒....\n主程序:multithreads.py\n<coolcode>\n#!/usr/bin/python\n#coding:utf-8\n\nimport signal,os,sys,threading,time\nfrom wk import wk\n\ndef sig_exit():\n    print \"[end time]:\"+str(time.time())\n    print \"exited.\"\n    sys.exit()\n\ndef handler(signum, frame):\n    print \"got an signal\",signum,frame\n    sig_exit()\n    if signum == 3:\n        sig_exit()\n    if signum == 2:\n        sig_exit()\n    if signum == 9:\n        sig_exit()\n        return None\nsignal.signal(signal.SIGINT,handler)\nsignal.signal(signal.SIGTERM,handler)\nsignal.signal(3,handler)\nsignal.signal(signal.SIGALRM, handler)\n\n\n\n\n\nthreads=[]\nfor a in xrange(0,4):\n    temp=wk()\n    temp.setDaemon(True)\n    temp.setName(\"thread:\"+str(a))\n    temp.start()\n    threads.append(temp)\n\nfor thread in threads:\n    thread.join()\n    print \"thread joined\",thread\n\nprint 'normally exit'\n</coolcode>\n现在我们运行它，并按下CTL+C.输出结果像这样:\n<coolcode>\nsleep 1 second,sleep 1 second, <wk(thread:1, started daemon -1218901104)> : 0\n sleep 1 second, <wk(thread:2, started daemon -1227293808)> : 0\n <wk(thread:0, started daemon -1210508400)> : 0\n sleep 1 second, <wk(thread:3, started daemon -1235686512)> : 0\nsleep 1 second, <wk(thread:2, started daemon -1227293808)> : 1\nsleep 1 second, <wk(thread:0, started daemon -1210508400)> : 1\nsleep 1 second, <wk(thread:1, started daemon -1218901104)> : 1\nsleep 1 second, <wk(thread:3, started daemon -1235686512)> : 1\n^Csleep 1 second, <wk(thread:0, started daemon -1210508400)> : 2\nsleep 1 second, <wk(thread:1, started daemon -1218901104)> : 2\nsleep 1 second, <wk(thread:3, started daemon -1235686512)> : 2\nsleep 1 second, <wk(thread:2, started daemon -1227293808)> : 2\n^Csleep 1 second, <wk(thread:0, started daemon -1210508400)> : 3\nsleep 1 second, <wk(thread:1, started daemon -1218901104)> : 3\nsleep 1 second, <wk(thread:3, started daemon -1235686512)> : 3\nsleep 1 second, <wk(thread:2, started daemon -1227293808)> : 3\ngot an signal 2 <frame object at 0x8afc87c>\n[end time]:1245852879.37\nexited.\n</coolcode>\n在按下CTRL+C后，程序并不是马上退出，而是又过了几秒钟才退出。\n而运行时不按CTRL+C干扰它时，是这样的输出:\n<coolcode>\nsleep 1 second, <wk(thread:0, started daemon -1211741296)> : 0\n sleep 1 second, <wk(thread:1, started daemon -1220134000)> : 0\nsleep 1 second, <wk(thread:2, started daemon -1228526704)> : 0\nsleep 1 second, <wk(thread:3, started daemon -1236919408)> : 0\nsleep 1 second, <wk(thread:1, started daemon -1220134000)> : 1\nsleep 1 second, <wk(thread:2, started daemon -1228526704)> : 1\nsleep 1 second, <wk(thread:0, started daemon -1211741296)> : 1\nsleep 1 second, <wk(thread:3, started daemon -1236919408)> : 1\nsleep 1 second, <wk(thread:1, started daemon -1220134000)> : 2\nsleep 1 second, <wk(thread:2, started daemon -1228526704)> : 2\nsleep 1 second, <wk(thread:0, started daemon -1211741296)> : 2\nsleep 1 second, <wk(thread:3, started daemon -1236919408)> : 2\nsleep 1 second, <wk(thread:1, started daemon -1220134000)> : 3\nsleep 1 second, <wk(thread:2, started daemon -1228526704)> : 3\nsleep 1 second, <wk(thread:0, started daemon -1211741296)> : 3\nsleep 1 second, <wk(thread:3, started daemon -1236919408)> : 3\nthread joined <wk(thread:0, stopped daemon -1211741296)>\nthread joined <wk(thread:1, stopped daemon -1220134000)>\nthread joined <wk(thread:2, stopped daemon -1228526704)>\nthread joined <wk(thread:3, stopped daemon -1236919408)>\nnormally exit\n＜/coolcode>\n说明在这个程序里，中断信号能被捕获，但是并不即时。\n\n而最后我的多线程程序是:last.py\n<coolcode>\n#!/usr/bin/python\n#coding:utf-8\n\nimport signal,os,sys,threading,time\nfrom wk import wk\n\ndef sig_exit():\n    print \"[end time]:\"+str(time.time())\n    print \"exited.\"\n    sys.exit()\n\ndef handler(signum, frame):\n    print \"got an signal\",signum,frame\n    if signum == 3:\n        sig_exit()\n    if signum == 2:\n        sig_exit()\n    if signum == 9:\n        sig_exit()\n        return None\nsignal.signal(signal.SIGINT,handler)\nsignal.signal(signal.SIGTERM,handler)\n#signal.signal(3,handler)\nsignal.signal(signal.SIGALRM, handler)\n\n\n\n\n\n\nclass pause(threading.Thread):\n    threads=[]\n    def run(self):\n        print \"pause running\"\n        for thread in self.threads:\n            thread.join()\n            print \"thread \",thread,\" joined\"\n        print \"all joined\"\n        signal.alarm(1)\n\n\nthreads=[]\nfor i in xrange(0,4):\n    j=wk()\n    j.setDaemon(True)\n    j.setName(\"thread:\"+str(i))\n    j.start()\n    threads.append(j)\n    print \"total threads:\",threading.activeCount()\n\nprint \"current thread:\",threading.activeCount()\nprint \"parent process,main thread,sleeping\"\n\nk=pause()\nk.setDaemon(True)\nk.threads=threads\nk.start()\nsignal.pause()\nprint \"normally exit\"\n</coolcode>\n这个程序里，我们的逻辑是这样的:主线程创建了其他工作线程，并且还创建了一个特殊的线程， 这个特殊的线程的任务就着等着其他的工作线程结束(调用了wk类的join方法)。当工作线程都结束后，这个线程就发一个alarm信号。而主线程创建完所有的其他线程后的工作，就是在坐在那儿专门等一个信号。因此当我们按CTRL＋C时信号就成功地被捕获了。而没有CTRL+C产生的信号被捕获时，所有工作线程(wk类)结束时也会产生一个alarm信号，也能让程序顺利退出。\n这个程序，运行时按下CTRL+C的输出是:\n<coolcode>\nsleep 1 second, <wk(thread:0, started daemon -1211634800)> : 0\n total threads: 2\nsleep 1 second, <wk(thread:1, started daemon -1220027504)> : 0\n total threads: 3\nsleep 1 second, <wk(thread:2, started daemon -1228420208)> : 0\n total threads: 4\nsleep 1 second, <wk(thread:3, started daemon -1236812912)> : 0\ntotal threads: 5\ncurrent thread: 5\nparent process,main thread,sleeping\npause running\n^Cgot an signal 2 <frame object at 0x8ddd304>\n[end time]:1245853073.05\nexited.\n</coolcode>\nCTRL+C给程序的信号马上得到了处理。运行这个程序时啥也不做，等着程序结束，输出则是:\n<coolcode>\nsleep 1 second, <wk(thread:0, started daemon -1211634800)> : 0\n total threads: 2\nsleep 1 second, <wk(thread:1, started daemon -1220027504)> : 0\n total threads: 3\nsleep 1 second, <wk(thread:2, started daemon -1228420208)> : 0\n total threads: 4\nsleep 1 second, <wk(thread:3, started daemon -1236812912)> : 0\ntotal threads: 5\ncurrent thread: 5\nparent process,main thread,sleeping\npause running\n^Cgot an signal 2 <frame object at 0x8ddd304>\n[end time]:1245853073.05\nexited.\nrenlu@aragorn:~/Dropbox/Private/devel/python$ py lastprogram.py\nsleep 1 second, <wk(thread:0, started daemon -1211233392)>total threads:  : 0\n2\nsleep 1 second, <wk(thread:1, started daemon -1219626096)> : 0\ntotal threads: 3\nsleep 1 second, <wk(thread:2, started daemon -1228018800)> : 0\ntotal threads: 4\nsleep 1 second, <wk(thread:3, started daemon -1236411504)> : 0\ntotal threads: 5\ncurrent thread: 5\nparent process,main thread,sleeping\npause running\nsleep 1 second, <wk(thread:0, started daemon -1211233392)> : 1\n sleep 1 second, <wk(thread:1, started daemon -1219626096)> : 1\nsleep 1 second, <wk(thread:2, started daemon -1228018800)> : 1\nsleep 1 second, <wk(thread:3, started daemon -1236411504)> : 1\nsleep 1 second, sleep 1 second, <wk(thread:1, started daemon -1219626096)> <wk(thread:0, started daemon -1211233392)> : 2\n : 2\nsleep 1 second, <wk(thread:2, started daemon -1228018800)> : 2\nsleep 1 second, <wk(thread:3, started daemon -1236411504)> : 2\nsleep 1 second, <wk(thread:0, started daemon -1211233392)> : 3\nsleep 1 second, <wk(thread:1, started daemon -1219626096)> : 3\nsleep 1 second, <wk(thread:2, started daemon -1228018800)> : 3\nsleep 1 second, <wk(thread:3, started daemon -1236411504)> : 3\nthread  <wk(thread:0, stopped daemon -1211233392)>  joined\nthread  <wk(thread:1, stopped daemon -1219626096)>  joined\nthread  <wk(thread:2, stopped daemon -1228018800)>  joined\nthread  <wk(thread:3, stopped daemon -1236411504)>  joined\nall joined\ngot an signal 14 <frame object at 0x8856304>\nnormally exit\n</coolcode>\n","postDate":"2009-06-24 22:32:54","postId":904,"type":"post","status":"publish","imported":true,"file":"904.md"}