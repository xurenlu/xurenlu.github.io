{"title":"更改字符集设置[译文]","zzzContent":"更改字符集设置\n原文设置:<a href=\"http://www.mysqlperformanceblog.com/2009/03/17/converting-character-sets/\">http://www.mysqlperformanceblog.com/2009/03/17/converting-character-sets/</a>\n\nWeb世界已经走向UTF8;Drizzle选中它作为默认的字符集。大多网站后端用utf-8来存储文本数据，另外那些用latin1字符集的网也开始将他们的数据库迁移到utf8;google一下\"mysql convert charset to utf8\",可以找到大量的网站，每个途径都有些微的不同，又在某些方面都有些不对。我会总结一下这些方法，说明他们为什么不奏效，然后给出一段脚本，大致上可以用来转换一个数据库或是一系列表到目标字标集。\n\n方法一:\n<coolcode>\nALTER TABLE `t1` CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci;\n</coolcode>\n拿这个数据表作例子，我们可以看到这种方法为啥子行不通呢。\n<coolcode>\nSQL:\n\n   1.\n      mysql> CREATE TABLE `t1` (\n   2.\n      ->   `c1` text NOT NULL\n   3.\n      -> ) ENGINE=MyISAM DEFAULT CHARSET=latin1;\n   4.\n      Query OK, 0 rows affected (0.02 sec)\n   5.\n\n   6.\n      mysql> ALTER TABLE `t1` CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci;\n   7.\n      Query OK, 0 rows affected (0.02 sec)\n   8.\n      Records: 0  Duplicates: 0  Warnings: 0\n   9.\n\n  10.\n      mysql> SHOW CREATE TABLE `t1`G\n  11.\n      *************************** 1. row ***************************\n  12.\n      TABLE: t1\n  13.\n      CREATE TABLE: CREATE TABLE `t1` (\n  14.\n      `c1` mediumtext NOT NULL\n  15.\n      ) ENGINE=MyISAM DEFAULT CHARSET=utf8\n  16.\n      1 row IN SET (0.01 sec)\n\n\n</coolcode>\n注意这里的c1隐含的从text到mediumtext的转换。这种方法能引起改变的数据类型和没有提示的截断，这从我们的目的上说是不能接受的。\n\n\n方法二［在<a href=\"http://www.haidongji.com/2008/11/11/convert-character-set-to-utf8-in-mysql/\">这里</a>记录着］:\n\n这种方法在转换之前,把所有的数据都转成了他二进制相似的数据类类型，避免了隐含的类型转换。由于实现方式的限制，他把原来以二进制形式存储的数据列也转成了文本的近似列。另外，这种方式有可能因为二进制数据不能进行全文检索而失败。即使这些解决了，这个过程也因为它过多的在每个表上执行alter语句而不能用在大数据量的数据库上。这些语句包括:\n1) Drop FULLTEXT indexes\n2) Convert target columns to their binary counterparts\n3) Convert the table to the target character set\n4) Convert target columns to their original data types\n5) Add FULLTEXT indexes back\n由于这些语句有时执行一句我们都需要花上n个钟头（我们是不是该庆幸是用小时来计数而不是用天来计数？），这也是不可接受的。\n\n\n方法三:\n导出整个数据库，再导入进去。当然，导入导出时选用正确的server端和client端字符集。\n这是一个有三个步骤的过程。我们先导出数据库结构，然后手工编辑把数据字符集修改正确，接出单独导出数据。接下来，创建数据表结构，导入数据。如果你在使用复制(replication),这通常不太可取，因为这样导致可笑的一大堆日志，并引起复制链上所有服务器重新载入数据。\n除开方法一之外，这些方法都不必要地麻烦。针对方法一，考虑一下下面这个alter语句：\n<coolcode>\n   1.\n      ALTER TABLE `t1`\n   2.\n      DEFAULT CHARSET=utf8,\n   3.\n      MODIFY COLUMN `c1` text CHARACTER SET utf8;\n</coolcode>\n这个语句能转换整个表的默认字符集和目标数据表列的字符集，并且保持全文索引不变。对于一个指定的数据表，只需要一句sql语句。一个perl脚本已经写好了，它可以将这个alter table 的操作原子化，您可以从这里下载:\n<coolcode>\n$ wget http://www.pablowe.net/convert_charset\n</coolcode>\n当这个脚本完成后，它会加到launchpad的Percona Tools 中去（也许是maatkit,如果证明是足够有用的话).它的一些不错的特性包括:\n1.对字符型外键的恰当处理。（当下还没搞定，不过你可能最好不要使用字符型外键)\n2.可以调节这个脚本创建的线程数目。（目前是每个表一个线程).\n用法:\n<coolcode>\n Usage:\nconvert_charset --database=database [options]\nOptions:\n--askpass\t\tPrompt for a MySQL password\n--charset\t\tThe target character set to convert to\n--collate\t\tThe target collation to convert to\n--database|d\t The target database\n--help|?\t\t Display this help and exit\n--host|h\t\t The target host\n--ignore-columns Columns to ignore, useful if you want to\nkeep the existing charset for a target column\nComma-separated.  NO SPACES.\ntable.column\n--ignore-tables  A comma-separated list of tables to ignore\n--password|p\t The MySQL password to use\n--port\t\t   The target port\n--tables\t\t A comma-separated list of tables to convert.\nAll non-named tables will be ignored\n--test\t\t   Print the ALTER statements that would be executed\nwithout executing them.\n--user|u\t\t The MySQL user\n--version|V\t  Display version information and exit\ndefaults are:\nATTRIBUTE\t\t\t\t  VALUE\n-------------------------- ------------------\naskpass\t\t\t\t\tFALSE\ncharset\t\t\t\t\tutf8\ncollate\t\t\t\t\tNo Default Value\ndatabase\t\t\t\t   No Default Value\nhelp\t\t\t\t\t   FALSE\nhost\t\t\t\t\t   localhost\nignore-columns\t\t\t No Default Value\nignore-tables\t\t\t  No Default Value\npassword\t\t\t\t   No Default Value\nport\t\t\t\t\t   3306\ntables\t\t\t\t\t No Default Value\ntest\t\t\t\t\t   FALSE\nuser\t\t\t\t\t   Current User\nversion\t\t\t\t\tFALSE\n</coolcode>","postDate":"2009-03-24 21:07:38","postId":856,"type":"post","status":"publish","imported":true,"file":"856.md"}